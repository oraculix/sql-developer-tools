<?xml version="1.0" encoding="UTF-8" ?>
<displays>
<display id="015af98c-0139-1000-8004-0a099923e5ad" type="" style="Table" enable="true">
	<name><![CDATA[LongOps-Gauge]]></name>
	<description><![CDATA[]]></description>
	<tooltip><![CDATA[]]></tooltip>
	<drillclass><![CDATA[]]></drillclass>
	<CustomValues>
		<TYPE><![CDATA[horizontal]]></TYPE>
	</CustomValues>
	<query minversion="8" maxversion="9.1.3">
		<sql><![CDATA[SELECT 'SQLDEV:GAUGE:0:100:0:100:'
       || DECODE( sofar, NULL, 100,
          DECODE( totalwork, 0, 100, NULL, sofar, ROUND(sofar/totalwork*100,0))) as progress
     , username, elapsed_seconds "Elapsed/s", time_remaining "Remaining/s", message
     , sid, serial#
     , sql_hash_value
     , sql_address
     , to_char(last_update_time, 'yyyy-mm-dd hh24:mi:ss') last_update_time
  FROM gv$session_longops
 WHERE 1=1
--   AND sofar <> totalwork         -- if you want to see active operations only
 ORDER BY SIGN( sofar - NVL( totalwork, 0 )), last_update_time DESC
 --target, sid]]></sql>
	</query>
	<query minversion="10" maxversion="10.1.9">
		<sql><![CDATA[SELECT 'SQLDEV:GAUGE:0:100:0:100:'
       || DECODE( sofar, NULL, 100,
          DECODE( totalwork, 0, 100, NULL, sofar, ROUND(sofar/totalwork*100,0))) as progress
     , username, elapsed_seconds "Elapsed/s", time_remaining "Remaining/s", message
     , sid, serial#
     , sql_hash_value
     --, NVL( sql_id, '[NULL]' ) AS sql_id
     , to_char(last_update_time, 'yyyy-mm-dd hh24:mi:ss') last_update_time
  FROM gv$session_longops
 WHERE 1=1
--   AND sofar <> totalwork         -- if you want to see active operations only
 ORDER BY SIGN( sofar - NVL( totalwork, 0 )), last_update_time DESC
 --target, sid]]></sql>
	</query>
	<query minversion="10.2" maxversion="11.1.9">
		<sql><![CDATA[SELECT 'SQLDEV:GAUGE:0:100:0:100:'
       || DECODE( sofar, NULL, 100,
          DECODE( totalwork, 0, 100, NULL, sofar, ROUND(sofar/totalwork*100,0))) as progress
     , username, elapsed_seconds "Elapsed/s", time_remaining "Remaining/s", message
     , sid, serial#, NVL( sql_id, '[NULL]' ) AS sql_id
     , to_char(last_update_time, 'yyyy-mm-dd hh24:mi:ss') last_update_time
  FROM gv$session_longops
 WHERE 1=1
--   AND sofar <> totalwork         -- if you want to see active operations only
 ORDER BY SIGN( sofar - NVL( totalwork, 0 )), last_update_time DESC
 --target, sid]]></sql>
	</query>
	<query minversion="11.2" maxversion="99">
		<sql><![CDATA[SELECT 'SQLDEV:GAUGE:0:100:0:100:'
       || DECODE( sofar, NULL, 100,
          DECODE( totalwork, 0, 100, NULL, sofar, ROUND(sofar/totalwork*100,0))) as progress
     , username, elapsed_seconds "Elapsed/s", time_remaining "Remaining/s", message
     , sid, serial#, NVL( sql_id, '[NULL]' ) AS sql_id
     , to_char(last_update_time, 'yyyy-mm-dd hh24:mi:ss') last_update_time
     , sql_exec_start, sql_plan_line_id, sql_exec_id
  FROM gv$session_longops
 WHERE 1=1
--   AND sofar <> totalwork         -- if you want to see active operations only
 ORDER BY SIGN( sofar - NVL( totalwork, 0 )), last_update_time DESC
 --target, sid]]></sql>
	</query>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[Session Detail]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[vertical]]></TYPE>
		</CustomValues>
		<query>
			<sql><![CDATA[SELECT *
  FROM gv$session
 WHERE sid = :SID
   AND serial# = :SERIAL#]]></sql>
			<binds>
				<bind id="SID">
					<prompt><![CDATA[SID]]></prompt>
					<tooltip><![CDATA[SID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SERIAL#">
					<prompt><![CDATA[SERIAL#]]></prompt>
					<tooltip><![CDATA[SERIAL#]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
			</binds>
		</query>
	</display>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[Wait Summary]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[horizontal]]></TYPE>
		</CustomValues>
		<query>
			<sql><![CDATA[SELECT s.username
     , se.event
     , SUM( total_waits ) total_waits
     , ROUND( SUM( time_waited )/100, 2 ) "Time waited / s"
     , AVG( average_wait )*10 "avg_wait / ms"
     , MAX( se.wait_class ) wait_class
  FROM gv$session_event se
     , gv$session s
 WHERE s.sid      = :SID
   AND s.serial#  = :SERIAL#
   AND se.sid     = s.sid
   AND se.inst_id = s.inst_id
--   AND se.wait_class <> 'Idle'
--   AND s.username IS NOT NULL
 GROUP BY s.username, se.event
 ORDER BY MAX( DECODE( se.wait_class, 'Idle', 1, 0 )), "Time waited / s" DESC]]></sql>
			<binds>
				<bind id="SID">
					<prompt><![CDATA[SID]]></prompt>
					<tooltip><![CDATA[SID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
				<bind id="SERIAL#">
					<prompt><![CDATA[SERIAL#]]></prompt>
					<tooltip><![CDATA[SERIAL#]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
			</binds>
		</query>
	</display>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[SQL-Detail]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[vertical]]></TYPE>
		</CustomValues>
		<query>
			<sql><![CDATA[select * from gv$sql where SQL_ID = :SQL_ID]]></sql>
			<binds>
				<bind id="SQL_ID">
					<prompt><![CDATA[SQL_ID]]></prompt>
					<tooltip><![CDATA[SQL_ID]]></tooltip>
					<value><![CDATA[NULL_VALUE]]></value>
					<bracket><![CDATA[null]]></bracket>
				</bind>
			</binds>
		</query>
		<query>
			<sql><![CDATA[select * from gv$sql where HASH_VALUE = :SQL_HASH_VALUE]]></sql>
		</query>
	</display>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[Explain Plan]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[horizontal]]></TYPE>
		</CustomValues>
		<query>
			<sql><![CDATA[-- Displays SQL plans from all cluster nodes when on RAC.
-- Captured while still in memory. Metrics below are for ALL executions of each child cursor.
-- If STATISTICS_LEVEL was set to ALL at the time of the hard-parse then A-Rows column is populated.
SELECT RPAD('Inst: '||v.inst_id, 9)||' '||RPAD('Child: '||v.child_number, 11) inst_child, t.plan_table_output
  FROM gv$sql v
     , TABLE( DBMS_XPLAN.DISPLAY('gv$sql_plan_statistics_all', NULL, 'ADVANCED ALLSTATS ALL'
            , 'inst_id = '||v.inst_id||' AND sql_id = '''||v.sql_id||''' AND child_number = '||v.child_number)) t
 WHERE v.sql_id = NVL( :SQL_ID, 'NULL!' )
   AND v.loaded_versions > 0]]></sql>
		</query>
		<query>
			<sql><![CDATA[SELECT child_number, id , lpad (' ', depth) || operation operation , options , object_name , optimizer , cost
  FROM V$SQL_PLAN
 WHERE hash_value = :SQL_HASH_VALUE
   AND address = :SQL_ADDRESS
 ORDER BY child_number, id]]></sql>
		</query>
	</display>
	<display id="null" type="" style="Code" enable="true">
		<name><![CDATA[SQL-Monitor (Text)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
		</CustomValues>
		<query>
			<sql><![CDATA[SELECT CASE WHEN :SQL_ID = '[NULL]' THEN TO_CLOB( 'SQL_ID IS NULL' )
       ELSE dbms_sqltune.report_sql_monitor( type=>'TEXT', sql_id => :SQL_ID
          , SESSION_ID => :SID, SESSION_SERIAL => :SERIAL#, SQL_EXEC_ID => :SQL_EXEC_ID )
       END AS report
  FROM dual]]></sql>
		</query>
	</display>
	<display id="null" type="" style="plsql-dbms_output" enable="true">
		<name><![CDATA[SQL-Monitor (HTML)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
		</CustomValues>
		<query>
			<sql><![CDATA[DECLARE
  l_report CLOB := dbms_sqltune.report_sql_monitor( type=>'HTML', sql_id => :SQL_ID
    , SESSION_ID => :SID, SESSION_SERIAL => :SERIAL#, SQL_EXEC_ID => :SQL_EXEC_ID );
  l_offset PLS_INTEGER := 1;
  l_length PLS_INTEGER := NVL(dbms_lob.getlength(l_report),0);
  l_chunk CONSTANT PLS_INTEGER := 8191;
BEGIN
  dbms_output.enable(NULL);
  --dbms_output.put_line('Len: '||l_length);
  WHILE l_offset < l_length LOOP
    --dbms_output.put_line('Off: '||l_offset);
    dbms_output.put_line(dbms_lob.substr( l_report, l_chunk, l_offset));
    l_offset := l_offset + l_chunk;
  END LOOP;
  --dbms_output.put_line('');
END;]]></sql>
		</query>
	</display>
	<display id="null" type="" style="Table" enable="true">
		<name><![CDATA[SQL-Monitor (Flash)]]></name>
		<description><![CDATA[]]></description>
		<tooltip><![CDATA[]]></tooltip>
		<drillclass><![CDATA[]]></drillclass>
		<CustomValues>
			<TYPE><![CDATA[horizontal]]></TYPE>
		</CustomValues>
		<query>
			<sql><![CDATA[SELECT CASE WHEN :SQL_ID = '[NULL]' THEN TO_CLOB( 'SQL_ID IS NULL' )
       ELSE dbms_sqltune.report_sql_monitor( type=>'EM', sql_id => :SQL_ID
          , SESSION_ID => :SID, SESSION_SERIAL => :SERIAL#, SQL_EXEC_ID => :SQL_EXEC_ID )
       END AS report
  FROM dual]]></sql>
		</query>
	</display>
</display>
</displays>
